{
	"info": {
		"_postman_id": "35647961-42634a90-5834-4a26-b13f-1650da7abfbe",
		"name": "Hotel Management and Booking System API",
		"description": "This API provides backend services for managing hotel operations, including user authentication, bookings, and administrative functions. It is built to support hotel staff such as receptionists, managers, and CEOs in securely accessing and managing system resources. Key features include user login, password recovery, room bookings, and customer data handling.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "950b368b-6797-47e2-844c-29de9c39c5d6",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object').that.includes.all.keys('status', 'message', 'token', 'expires_in');",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Expires_in must be a positive integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('expires_in');",
									"    pm.expect(responseData.expires_in).to.be.a('number').and.to.be.greaterThan(0);",
									"});",
									"",
									"",
									"pm.test(\"Message contains a success indication\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.satisfy(msg => msg.toLowerCase().includes('success'), \"Message should indicate success\");",
									"});",
									"// Stores the token in an environment variable",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"authToken\", jsonData.token);",
									"",
									"pm.test(\"Response status code is 200 and has required fields\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(jsonData).to.be.an('object').that.includes.all.keys('status', 'message', 'token', 'expires_in');",
									"});",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    pm.expect(jsonData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Token should not be empty\");",
									"});",
									"",
									"pm.test(\"Expires_in must be a positive integer\", function () {",
									"    pm.expect(jsonData).to.have.property('expires_in');",
									"    pm.expect(jsonData.expires_in).to.be.a('number').and.to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Message contains a success indication\", function () {",
									"    pm.expect(jsonData.message).to.exist.and.to.satisfy(msg => msg.toLowerCase().includes('success'), \"Message should indicate success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "35647961-d35e4aa1-b8a5-45f3-b451-e1b6f56bc44e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usernameOrEmail\": \"kwamegilbert1114@gmail.com\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						},
						"description": "### Login Endpoint\n\nThis endpoint allows users to authenticate by logging in with their credentials. It accepts a POST request to the `/v1/auth/login` URL.\n\n#### Purpose\n\nThe login endpoint is designed for users to securely access their accounts by providing either a username or email along with the corresponding password.\n\n#### Request Body\n\nThe request must include a JSON object with the following parameters:\n\n- **usernameOrEmail** (string): The username or email address of the user attempting to log in.\n    \n- **password** (string): The password associated with the user's account.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"usernameOrEmail\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n\n ```\n\n#### Response\n\nUpon successful authentication, the server responds with a JSON object containing:\n\n- **status** (string): The status of the login attempt.\n    \n- **message** (string): A message providing additional information regarding the login attempt.\n    \n- **token** (string): A token that can be used for subsequent authenticated requests.\n    \n- **expires_in** (string): The duration (in seconds) until the token expires.\n    \n\n**Status Code**: 200 OK\n\n**Example Response:**\n\n``` json\n{\n  \"status\": \"success\",\n  \"message\": \"Login successful\",\n  \"token\": \"your_generated_token\",\n  \"expires_in\": \"3600\"\n}\n\n ```\n\n### Notes\n\n- Ensure that the username/email and password provided are correct to avoid authentication errors.\n    \n- The token received in the response should be stored securely and included in the headers of subsequent requests to access protected resources.\n    \n\nThis documentation serves as a guide for hotel receptionists, managers, and CEOs to understand the login process, ensuring secure access to the application."
					},
					"response": [
						{
							"id": "35647961-1a6f8d27-fece-4268-b5cb-3fe6b8bfedd8",
							"name": "Wrong User or Password",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"usernameOrEmail\": \"kwamegilbert1114@gmail.com\",\r\n    \"password\": \"12345\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/v1/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"error\",\n    \"message\": \"Invalid username or password\"\n}"
						},
						{
							"id": "35647961-4bac4f61-004c-4b7b-ac47-8d00b201e012",
							"name": "Sucessful Login",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"usernameOrEmail\": \"kwamegilbert1114@gmail.com\",\r\n    \"password\": \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/v1/auth/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Login successful\",\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6ImFlOGIwNmJkLTUyMjMtNDZlZC05MzA0LWM3YTFkN2VlNDRhNCIsImhvdGVsX2lkIjoiYWU4Y2FkZWMtNDFmNC0xMWYwLTgzZGUtMzBmNzcyM2FhMzVjIiwiYnJhbmNoX2lkIjpudWxsLCJ1c2VybmFtZSI6Ikt3YW1lR2lsYmVydCIsIm5hbWUiOiJHaWxiZXJ0IEVsaWtwbGltIEt1a2FoIiwiZW1haWwiOiJrd2FtZWdpbGJlcnQxMTE0QGdtYWlsLmNvbSIsInBob25lIjoiMjMzNTQxNDM2NDE0Iiwicm9sZSI6InJlY2VwdGlvbmlzdCIsImlzX2FjdGl2ZSI6MSwiZmlyc3RfbG9naW4iOjAsImxhc3RfbG9naW4iOiIyMDI1LTA2LTA5IDE3OjUxOjE1IiwiY3JlYXRlZF9hdCI6IjIwMjUtMDYtMDUgMTA6MTc6MDciLCJpYXQiOjE3NDk0OTE1NDgsImV4cCI6MTc0OTQ5NTE0OH0.RQbzPiq0OTYJ-dtLxu92SvB6uo6sSS_wVc_OyVrKs_E\",\n    \"expires_in\": \"3600\"\n}"
						}
					]
				},
				{
					"name": "Forgot Password",
					"id": "35647961-7f6b8b29-be71-404b-af19-fb02eba99b14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"emailOrPhone\": \"233541436414\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1/auth/forgot-password",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				}
			],
			"id": "35647961-7aa4670a-43c7-4bca-9e1f-d1a898ad1624",
			"description": "The **Auth** folder contains authentication-related endpoints that facilitate secure access to the Hotel Management and Booking System. These include:\n\n- **Login:** Allows users (e.g., receptionists, managers) to log in using their username or email and password. Returns a token for accessing protected resources.\n    \n- **Forgot Password:** Enables users to initiate password recovery using their registered email or phone number.\n    \n\nThese endpoints ensure only authorised personnel can access sensitive parts of the system and are foundational to maintaining secure hotel operations."
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8838ea27-70dd-4298-913b-518377e63225",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: status and users\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('status', 'users');",
									"});",
									"",
									"",
									"pm.test(\"Users is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.users).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'id' and 'hotel_id' are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.users).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.users.forEach(user => {",
									"        pm.expect(user.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"id should not be empty\");",
									"        pm.expect(user.hotel_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"hotel_id should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format for all users\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.users).to.be.an('array');",
									"",
									"    responseData.users.forEach(function(user) {",
									"        pm.expect(user.email).to.exist;",
									"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "35647961-5a7c32dd-cf49-434b-8434-fc7421c262fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users"
							]
						},
						"description": "## Get Users\n\nThis endpoint retrieves a list of users from the system. It is an HTTP GET request to the `/v1/users` endpoint.\n\n### Request Parameters\n\nThere are no request parameters required for this endpoint.\n\n### Expected Response\n\nOn a successful request, the API will return a `200 OK` status with a JSON response containing the following structure:\n\n- **status**: A string indicating the status of the request.\n    \n- **users**: An array of user objects, each containing the following fields:\n    \n    - **id**: The unique identifier for the user.\n        \n    - **hotel_id**: The identifier for the hotel associated with the user.\n        \n    - **branch_id**: The identifier for the branch associated with the user (can be null).\n        \n    - **username**: The username of the user.\n        \n    - **name**: The full name of the user.\n        \n    - **email**: The email address of the user.\n        \n    - **phone**: The phone number of the user.\n        \n    - **role**: The role of the user within the system.\n        \n    - **is_active**: A flag indicating whether the user account is active (0 for inactive, 1 for active).\n        \n    - **first_login**: A flag indicating if this is the user's first login (0 for no, 1 for yes).\n        \n    - **last_login**: The timestamp of the user's last login (can be null).\n        \n\n### Notes\n\n- Ensure that you have the necessary permissions to access this endpoint.\n    \n- The response may include multiple user objects, depending on the number of users in the system."
					},
					"response": []
				},
				{
					"name": "Get User By Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('user').that.is.an('object');",
									"    ",
									"    const user = responseData.user;",
									"    pm.expect(user).to.have.all.keys('id', 'hotel_id', 'branch_id', 'username', 'name', 'email', 'phone', 'role', 'is_active', 'first_login', 'last_login');",
									"    ",
									"    pm.expect(user.id).to.be.a('string');",
									"    pm.expect(user.hotel_id).to.be.a('string');",
									"    pm.expect(user.branch_id).to.satisfy(value => value === null || typeof value === 'string');",
									"    pm.expect(user.username).to.be.a('string');",
									"    pm.expect(user.name).to.be.a('string');",
									"    pm.expect(user.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"    pm.expect(user.phone).to.be.a('string');",
									"    pm.expect(user.role).to.be.a('string');",
									"    pm.expect(user.is_active).to.be.a('number');",
									"    pm.expect(user.first_login).to.be.a('number');",
									"    pm.expect(user.last_login).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
									"    ",
									"    const email = responseData.user.email;",
									"    pm.expect(email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"The phone number must be in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
									"    ",
									"    const phone = responseData.user.phone;",
									"    const phoneRegex = /^\\+?[1-9]\\d{1,14}$/; // Example regex for international phone number format",
									"    pm.expect(phone).to.match(phoneRegex, \"Phone number is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"The 'is_active' field should be either 0 or 1\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.be.an('object');",
									"    pm.expect(responseData.user.is_active).to.be.oneOf([0, 1], \"'is_active' should be either 0 or 1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35647961-4eefcde1-0770-4876-b867-a1414c389497",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/users/username/KwameGilbert",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"username",
								"KwameGilbert"
							]
						},
						"description": "### Get User Details\n\nThis endpoint retrieves the details of a specific user based on their username.\n\n- **Method**: `GET`\n    \n- **Endpoint**: `{{host}}/v1/users/username/{username}`\n    \n\n#### Parameters\n\n- **Path Parameter**:\n    \n    - `username` (string): The username of the user whose details are being requested. In this example, the username is `KwameGilbert`.\n        \n\n#### Expected Response\n\nOn a successful request, the server responds with a status code of `200` and a JSON object containing the user details. The response structure is as follows:\n\n``` json\n{\n  \"status\": \"\",\n  \"user\": {\n    \"id\": \"\",\n    \"hotel_id\": \"\",\n    \"branch_id\": null,\n    \"username\": \"\",\n    \"name\": \"\",\n    \"email\": \"\",\n    \"phone\": \"\",\n    \"role\": \"\",\n    \"is_active\": 0,\n    \"first_login\": 0,\n    \"last_login\": \"\"\n  },\n  \"message\": null\n}\n\n ```\n\n- **Response Fields**:\n    \n    - `status`: A string indicating the status of the request.\n        \n    - `user`: An object containing user details:\n        \n        - `id`: The unique identifier for the user.\n            \n        - `hotel_id`: The ID of the hotel associated with the user.\n            \n        - `branch_id`: The ID of the branch associated with the user (may be null).\n            \n        - `username`: The username of the user.\n            \n        - `name`: The full name of the user.\n            \n        - `email`: The email address of the user.\n            \n        - `phone`: The phone number of the user.\n            \n        - `role`: The role of the user within the system.\n            \n        - `is_active`: A flag indicating if the user account is active (0 for inactive, 1 for active).\n            \n        - `first_login`: A flag indicating if this is the user's first login (0 for no, 1 for yes).\n            \n        - `last_login`: The timestamp of the user's last login.\n            \n\nThis endpoint is useful for obtaining detailed information about a specific user in the system."
					},
					"response": [
						{
							"id": "35647961-04e285fd-449a-4d77-868e-d6007cb03c19",
							"name": "User Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/v1/users/username/KwameGilbert",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"username",
										"KwameGilbert"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\r\n    \"status\": \"success\",\r\n    \"user\": {\r\n        \"id\": \"a38bfd78-41f6-11f0-83de-30f7723aa35c\",\r\n        \"hotel_id\": \"ae8cadec-41f4-11f0-83de-30f7723aa35c\",\r\n        \"branch_id\": null,\r\n        \"username\": \"KwameGilbert\",\r\n        \"name\": \"Gilbert Elikplim Kukah\",\r\n        \"email\": \"kwamegilbert1114@gmail.com\",\r\n        \"phone\": \"233541436414\",\r\n        \"role\": \"receptionist\",\r\n        \"is_active\": 1,\r\n        \"first_login\": 0,\r\n        \"last_login\": \"2025-06-09 17:52:28\"\r\n    },\r\n    \"message\": null\r\n}"
						},
						{
							"id": "35647961-377d09c8-51ea-47ee-aa06-93828724867f",
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/v1/users/username/KwameGilbert",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"username",
										"KwameGilbert"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"error\",\n    \"user\": null,\n    \"message\": \"User not found with this username\"\n}"
						}
					]
				},
				{
					"name": "Get User By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('status', 'message');",
									"});",
									"",
									"",
									"pm.test(\"Status must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35647961-30bfb6a9-b33c-4cd4-b228-ab05aa8ae0e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/users/ae8cadec-41f4-11f0-83de-30f7723aa35c",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"ae8cadec-41f4-11f0-83de-30f7723aa35c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields in the user object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.be.an('object');",
									"    pm.expect(responseData.user).to.include.keys('id', 'hotel_id', 'branch_id', 'username', 'name', 'email', 'phone', 'role', 'is_active', 'first_login', 'last_login');",
									"});",
									"",
									"",
									"pm.test(\"Email matches the requested email in the URL\", function () {",
									"    const responseData = pm.response.json();",
									"    const requestedEmail = pm.request.url.split(\"/\").pop(); // Extracting the email from the URL",
									"    pm.expect(responseData.user.email).to.equal(requestedEmail);",
									"});",
									"",
									"",
									"pm.test(\"The phone must be in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
									"    ",
									"    const phoneRegex = /^\\+?[1-9]\\d{1,14}$/; // Example regex for validating phone format",
									"    pm.expect(responseData.user.phone).to.match(phoneRegex, \"Phone format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'is_active' and 'first_login' are integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.user).to.be.an('object');",
									"    pm.expect(responseData.user.is_active).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.user.first_login).to.be.a('number').and.to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35647961-813e6145-3111-45b5-ab43-840a1eb106fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/users/email/kwamegilbert1114@gmail.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"email",
								"kwamegilbert1114@gmail.com"
							]
						},
						"description": "### Get User by Email\n\nThis endpoint retrieves user information based on the provided email address. It is a simple GET request that allows you to check if a user exists in the system by querying their email.\n\n**Endpoint:**  \n`GET {{host}}/v1/users/email/{email}`\n\n**Path Parameters:**\n\n- `email` (string, required): The email address of the user you want to retrieve. In this example, it is `kwamegilbert1114@gmail.com`.\n    \n\n**Expected Response:**  \nOn a successful request, the server will respond with a status code of `200`. The response body will contain the following fields:\n\n- `status` (string): Indicates the status of the request.\n    \n- `user` (object or null): Contains user details if the user exists; otherwise, it will be null.\n    \n- `message` (string): Provides additional information regarding the request.\n    \n\n**Notes:**\n\n- If the user exists, the `user` field will provide relevant details about the user. If the user does not exist, this field will return null.\n    \n- Ensure that the email provided is valid and correctly formatted to avoid unnecessary errors.\n    \n\nThis endpoint retrieves user information based on the provided email address.\n\n### Request\n\n- **Method**: GET\n    \n- **URL**: `{{host}}/v1/users/email/{email}`\n    \n\n#### Path Parameters\n\n- **email** (string): The email address of the user whose information is being requested. In this example, the email is `kwamegilbert1114@gmail.com`.\n    \n\n### Response\n\nUpon a successful request (HTTP status code 200), the response will be a JSON object structured as follows:\n\n- **status** (string): Indicates the status of the request.\n    \n- **user** (object or null): Contains user information if found; otherwise, it will be null.\n    \n- **message** (string): Provides additional information regarding the request status.\n    \n\n### Notes\n\n- Ensure that the email provided in the request is valid and exists in the system to receive relevant user data.\n    \n- The response may vary based on whether the user is found or not, with `user` being null if no matching record exists."
					},
					"response": []
				},
				{
					"name": "Get User By Phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"User object is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('user').that.is.an('object');",
									"});",
									"",
									"",
									"pm.test(\"User ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.be.an('object');",
									"    pm.expect(responseData.user.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"User ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email should be in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.user.email).to.exist;",
									"    pm.expect(responseData.user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Validate 'is_active' and 'first_login' fields are integers within expected ranges\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    const user = responseData.user;",
									"    pm.expect(user.is_active).to.be.a('number').and.to.be.at.least(0).and.to.be.at.most(1, \"is_active should be either 0 or 1\");",
									"    pm.expect(user.first_login).to.be.a('number').and.to.be.at.least(0, \"first_login should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35647961-096a2a54-62c4-4ccd-a18f-93eca6f2c979",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/users/phone/233541436414",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"phone",
								"233541436414"
							]
						},
						"description": "### Endpoint Description\n\nThis endpoint retrieves user information based on the provided phone number. It is designed to allow clients to access user details associated with a specific phone number.\n\n### Request\n\n- **Method**: GET\n    \n- **URL**: `{{host}}/v1/users/phone/{phone_number}`\n    \n\n#### Path Parameter\n\n- `phone_number` (string): The phone number of the user you wish to retrieve information for. It should be formatted correctly to ensure accurate results.\n    \n\n### Response\n\nUpon a successful request, the API will return a JSON response with the following structure:\n\n- **status** (string): Indicates the status of the request. It may contain values such as success or error messages.\n    \n- **user** (object or null): This field contains user details if found. If no user is associated with the provided phone number, this will be `null`.\n    \n- **message** (string): Provides additional information about the request's outcome, such as errors or confirmations.\n    \n\n### Example Response\n\n``` json\n{\n  \"status\": \"\",\n  \"user\": null,\n  \"message\": \"\"\n}\n\n ```\n\n### Status Codes\n\n- **200 OK**: The request was successful, and the response contains the requested data.\n    \n\nThis endpoint is useful for applications that need to verify user identities or retrieve user profiles based on phone numbers."
					},
					"response": []
				},
				{
					"name": "Get User By Identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('status', 'message');",
									"});",
									"",
									"",
									"pm.test(\"Status must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35647961-d522054e-3fa2-44d3-adb0-a4b59475e714",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/users/identifier/233246706020",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"identifier",
								"233246706020"
							]
						},
						"description": "### Get User by Identifier\n\nThis endpoint retrieves user information based on a unique identifier. The identifier can be either the user's **phone number**, **email address**, or **username**.\n\n**HTTP Method:** `GET`\n\n**Endpoint:** `{{host}}/v1/users/identifier/{identifier}`\n\n**Path Parameters:**\n\n- `identifier` (string): The unique identifier for the user, which can be their phone number, email address, or username.\n    \n\n**Response:**  \nOn a successful request, the API will return a `200` status code along with the following structure:\n\n``` json\n{\n  \"status\": \"\",\n  \"user\": null,\n  \"message\": \"\"\n}\n\n ```\n\n- `status` (string): The status of the request.\n    \n- `user` (object|null): The user object containing user details, or `null` if no user is found.\n    \n- `message` (string): A message providing additional information about the request.\n    \n\nEnsure to provide a valid identifier to receive the appropriate user data.\n\nThis endpoint retrieves user information based on a unique identifier. The identifier can be one of the following: the user's phone number, email address, or username.\n\n#### Request\n\n- **Method**: GET\n    \n- **URL**: `{{host}}/v1/users/identifier/{identifier}`\n    \n    - Replace `{identifier}` with the user's phone number, email address, or username.\n        \n\n#### Response\n\n- **Status Code**: 200 OK\n    \n- { \"status\": \"\", \"user\": null, \"message\": \"\"}\n    \n    - `status`: Indicates the status of the request.\n        \n    - `user`: Contains user details if found; otherwise, it will be `null`.\n        \n    - `message`: Provides additional information regarding the request.\n        \n\nThis endpoint is useful for retrieving user data based on various identifiers, allowing for flexibility in how users can be queried.\n\n**Method:** `GET`  \n**Endpoint:** `{{host}}/v1/users/identifier/{user_id}`\n\n#### Description\n\nThis endpoint is used to retrieve user information based on a unique identifier. The user identifier is specified in the URL path as a parameter.\n\n#### Parameters\n\n- **user_id** (path parameter): A unique identifier for the user. In this example, the identifier is `233246706020`.\n    \n\n#### Expected Response\n\nUpon a successful request, the server will respond with a `200 OK` status code. The response format will include the following fields:\n\n- **status**: A string indicating the status of the request.\n    \n- **user**: An object that contains user details (in this case, it may return `null` if the user is not found).\n    \n- **message**: A string that may contain additional information about the request.\n    \n\n#### Example Response\n\n``` json\n{\n  \"status\": \"\",\n  \"user\": null,\n  \"message\": \"\"\n}\n\n ```\n\nThis structure allows clients to understand the outcome of their request and handle the user data accordingly."
					},
					"response": []
				},
				{
					"name": "Create New User",
					"id": "35647961-10f7ffab-08be-4f79-806a-65e3260cb163",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"hotel_id\": null,\r\n    \"branch_id\": null,\r\n    \"username\": \"KobbyDalton\",\r\n    \"name\": \"Anthony Afriyie\",\r\n    \"email\": \"kobby.dalton@gmail.com\",\r\n    \"phone\": \"233541436414\",\r\n    \"password\": \"1234\",\r\n    \"role\": \"receptionist\",\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users"
							]
						},
						"description": "### Endpoint:  \nPOST {{host}}/v1/users\n\nThis endpoint is used to create a new user in the system. It allows the client to submit user details, which will be processed and stored in the database.\n\n#### Request Body Parameters\n\nThe request must include a JSON payload with the following parameters:\n\n- **hotel_id** (string): The unique identifier for the hotel associated with the user.\n    \n- **branch_id** (string or null): The unique identifier for the branch associated with the user. This can be null if not applicable.\n    \n- **username** (string): The desired username for the new user.\n    \n- **name** (string): The full name of the user.\n    \n- **email** (string): The email address of the user, which should be unique.\n    \n- **phone** (string): The phone number of the user.\n    \n- **password** (string): The password for the user account.\n    \n- **role** (string): The role assigned to the user (e.g., receptionist).\n    \n- **is_active** (boolean): A flag indicating whether the user account is active.\n    \n\n#### Response Structure\n\nUpon successful creation of the user, the server responds with a JSON object containing the following fields:\n\n- **status** (string): The status of the request (e.g., success or error).\n    \n- **field** (string): The specific field related to any error, if applicable.\n    \n- **message** (string): A message providing additional information about the request status.\n    \n\n#### Example Response\n\nA typical successful response will look like this:\n\n``` json\n{\n  \"status\": \"\",\n  \"field\": \"\",\n  \"message\": \"\"\n}\n\n ```\n\nThis endpoint is crucial for managing user accounts within the application, allowing administrators to onboard new users efficiently."
					},
					"response": [
						{
							"id": "35647961-a5044126-f591-434a-a945-792b133a041c",
							"name": "User Already Exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"hotel_id\": \"ae8cadec-41f4-11f0-83de-30f7723aa35c\",\r\n    \"branch_id\": null,\r\n    \"username\": \"KobbyDalton\",\r\n    \"name\": \"Anthony Afriyie\",\r\n    \"email\": \"kobby.dalton@gmail.com\",\r\n    \"phone\": \"233541436414\",\r\n    \"password\": \"1234\",\r\n    \"role\": \"receptionist\",\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"error\",\n    \"field\": \"username\",\n    \"message\": \"Username already in use by another account\"\n}"
						},
						{
							"id": "35647961-6763af0b-facd-46fa-b3a5-857962e75428",
							"name": "Create New User",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"hotel_id\": null,\r\n    \"branch_id\": null,\r\n    \"username\": \"RandomUser\",\r\n    \"name\": \"John Doe\",\r\n    \"email\": \"john.doe@example.com\",\r\n    \"phone\": \"1234567890\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"manager\",\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\r\n    \"status\": \"success\",\r\n    \"user\": {\r\n        \"id\": \"3326b93d-8af8-4460-99f6-809070e052f1\",\r\n        \"hotel_id\": null,\r\n        \"branch_id\": null,\r\n        \"username\": \"RandomUser\",\r\n        \"name\": \"John Doe\",\r\n        \"email\": \"john.doe@example.com\",\r\n        \"phone\": \"1234567890\",\r\n        \"role\": \"manager\",\r\n        \"is_active\": 0,\r\n        \"first_login\": 1,\r\n        \"last_login\": null\r\n    },\r\n    \"message\": \"User created successfully\"\r\n}"
						}
					]
				},
				{
					"name": "Update User Record",
					"id": "35647961-8681c180-d3ab-496a-9516-d98f10ad25f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"hotel_id\": \"ae8cadec-41f4-11f0-83de-30f7723aa35c\",\r\n    \"branch_id\": null,\r\n\"username\": \"NewUsername\",\r\n    \"name\": \"Anthony Afriyie\",\r\n    \"email\": \"kobby.dalton@gmail.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"password\": \"1234\",\r\n    \"role\": \"receptionist\",\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1/users/a38bfd78-41f6-11f0-83de-30f7723aa35c",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"a38bfd78-41f6-11f0-83de-30f7723aa35c"
							]
						},
						"description": "## Update User Information\n\nThis endpoint allows you to update the information of a specific user identified by their unique user ID.\n\n### Request\n\n- **Method**: `PUT`\n    \n- **Endpoint**: `{{host}}/v1/users/{user_id}`\n    \n\n### Request Body\n\nThe request body should be in JSON format and include the following parameters:\n\n- **hotel_id** (string): The unique identifier for the hotel associated with the user.\n    \n- **branch_id** (string or null): The unique identifier for the branch associated with the user, can be null.\n    \n- **username** (string): The username of the user.\n    \n- **name** (string): The full name of the user.\n    \n- **email** (string): The email address of the user.\n    \n- **phone** (string): The phone number of the user.\n    \n- **password** (string): The password for the user's account.\n    \n- **role** (string): The role assigned to the user (e.g., receptionist).\n    \n- **is_active** (boolean): Indicates whether the user's account is active.\n    \n\n### Response\n\nUpon a successful update, the API will return a response with a `200` status code, indicating that the request was processed successfully. The response will typically include the following fields:\n\n- **status** (string): The status of the request.\n    \n- **user** (object or null): The updated user object or null if the user does not exist.\n    \n- **message** (string): A message detailing the result of the request.\n    \n\nEnsure that all required fields are provided in the request body to avoid errors during the update process."
					},
					"response": [
						{
							"id": "35647961-7cb69b0c-3bcc-4958-88f6-a90611119007",
							"name": "Update User Record",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"hotel_id\": \"ae8cadec-41f4-11f0-83de-30f7723aa35c\",\r\n    \"branch_id\": null,\r\n\"username\": \"NewUsername\",\r\n    \"name\": \"Anthony Afriyie\",\r\n    \"email\": \"kobby.dalton@gmail.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"password\": \"1234\",\r\n    \"role\": \"receptionist\",\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/v1/users/a38bfd78-41f6-11f0-83de-30f7723aa35c",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"a38bfd78-41f6-11f0-83de-30f7723aa35c"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 09 Jun 2025 19:48:31 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "90"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "8e6f5ce6-89e8-4f2d"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94d32593ff02d650-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"error\",\n    \"field\": \"username\",\n    \"message\": \"Username already in use by another account\"\n}"
						}
					]
				},
				{
					"name": "Delete User Record",
					"id": "35647961-ea089cb5-7283-4770-a47e-27faccd288e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/users/a38bfd78-41f6-11f0-83de-30f7723aa35c",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"a38bfd78-41f6-11f0-83de-30f7723aa35c"
							]
						}
					},
					"response": []
				}
			],
			"id": "35647961-9febd6b3-bb21-4a02-b3f8-282db945814c"
		},
		{
			"name": "Hotel",
			"item": [
				{
					"name": "Get All Hotels",
					"id": "35647961-d3a2bc82-4d0b-49f7-8722-fbb183f09fe5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/hotels",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"hotels"
							]
						},
						"description": "# Get Hotels\n\nThis endpoint retrieves a list of hotels from the system. It is a simple HTTP GET request that does not require any parameters in the request body.\n\n## Request Format\n\n- **Method**: GET\n    \n- **URL**: `{{host}}/v1/hotels`\n    \n\n## Response Structure\n\nOn a successful request, the API will return a JSON response with the following structure:\n\n- **status**: A string indicating the status of the request.\n    \n- **hotels**: An array of hotel objects, where each hotel object contains:\n    \n    - **id**: The unique identifier for the hotel.\n        \n    - **name**: The name of the hotel.\n        \n    - **address**: The physical address of the hotel.\n        \n    - **city**: The city where the hotel is located.\n        \n    - **country**: The country where the hotel is located.\n        \n    - **email**: The contact email for the hotel.\n        \n    - **phone**: The contact phone number for the hotel.\n        \n    - **description**: A brief description of the hotel.\n        \n    - **created_at**: The timestamp when the hotel record was created.\n        \n    - **updated_at**: The timestamp when the hotel record was last updated.\n        \n- **message**: Additional information about the request, if any.\n    \n\n### Example Response\n\n``` json\n{\n  \"status\": \"\",\n  \"hotels\": [\n    {\n      \"id\": \"\",\n      \"name\": \"\",\n      \"address\": \"\",\n      \"city\": \"\",\n      \"country\": \"\",\n      \"email\": \"\",\n      \"phone\": \"\",\n      \"description\": \"\",\n      \"created_at\": \"\",\n      \"updated_at\": \"\"\n    }\n  ],\n  \"message\": null\n}\n\n ```\n\nThis endpoint is useful for retrieving hotel information, which can be utilized in various applications such as booking systems or hotel management platforms."
					},
					"response": [
						{
							"id": "35647961-b1da03f9-6dcc-46b4-91da-b87a1d600912",
							"name": "Get All Hotels",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/v1/hotels",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 22:37:40 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "257"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "c945f443-3053-4dc3"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc5aabe840e605-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"success\",\n    \"hotels\": [\n        {\n            \"id\": \"ae8cadec-41f4-11f0-83de-30f7723aa35c\",\n            \"name\": \"Senator Hotel\",\n            \"address\": \"Tanoso\",\n            \"city\": \"Kumasi\",\n            \"country\": \"Ghana\",\n            \"email\": \"senator@email.com\",\n            \"phone\": \"233246706020\",\n            \"description\": \"Best hotel ever\",\n            \"created_at\": \"2025-06-05 10:03:06\",\n            \"updated_at\": \"2025-06-05 10:03:06\"\n        }\n    ],\n    \"message\": null\n}"
						}
					]
				},
				{
					"name": "Get Hotel By Id",
					"id": "35647961-f2846622-ed4a-4d87-a023-4441e3d10d02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30f7723aa35c",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"hotels",
								"ae8cadec-41f4-11f0-83de-30f7723aa35c"
							]
						},
						"description": "### Get Hotel Details\n\nThis endpoint retrieves detailed information about a specific hotel identified by its unique ID. The request is made using the HTTP GET method.\n\n#### Request\n\n- **URL**: `{{host}}/v1/hotels/{hotel_id}`\n    \n- **Method**: GET\n    \n\nThe `hotel_id` in the URL should be replaced with the unique identifier of the hotel you wish to retrieve details for.\n\n#### Response\n\nThe response will return a JSON object containing the following structure:\n\n- **status**: A string indicating the status of the request.\n    \n- **hotel**: An object containing hotel details or `null` if no hotel is found. The hotel object includes:\n    \n    - **id**: The unique identifier of the hotel.\n        \n    - **name**: The name of the hotel.\n        \n    - **address**: The physical address of the hotel.\n        \n    - **city**: The city where the hotel is located.\n        \n    - **country**: The country where the hotel is located.\n        \n    - **email**: The contact email of the hotel.\n        \n    - **phone**: The contact phone number of the hotel.\n        \n    - **description**: A brief description of the hotel.\n        \n    - **created_at**: The timestamp when the hotel record was created.\n        \n    - **updated_at**: The timestamp when the hotel record was last updated.\n        \n- **message**: A string that may contain additional information or error messages.\n    \n\n#### Example Responses\n\n1. { \"status\": \"\", \"hotel\": { \"id\": \"\", \"name\": \"\", \"address\": \"\", \"city\": \"\", \"country\": \"\", \"email\": \"\", \"phone\": \"\", \"description\": \"\", \"created_at\": \"\", \"updated_at\": \"\" }, \"message\": null }\n    \n2. { \"status\": \"\", \"hotel\": null, \"message\": \"\" }\n    \n\nThis endpoint is essential for applications that need to display or process hotel information based on a unique identifier."
					},
					"response": [
						{
							"id": "35647961-b161fda8-d7ee-4bb9-8955-092d9bbc58a9",
							"name": "Successfully Found Hotel By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30f7723aa35c",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels",
										"ae8cadec-41f4-11f0-83de-30f7723aa35c"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 22:28:44 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "248"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "60bcf983-f0bb-4e1f"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc4daabbea3b66-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"success\",\n    \"hotel\": {\n        \"id\": \"ae8cadec-41f4-11f0-83de-30f7723aa35c\",\n        \"name\": \"Senator Hotel\",\n        \"address\": \"Tanoso\",\n        \"city\": \"Kumasi\",\n        \"country\": \"Ghana\",\n        \"email\": \"senator@email.com\",\n        \"phone\": \"233246706020\",\n        \"description\": \"Best hotel ever\",\n        \"created_at\": \"2025-06-05 10:03:06\",\n        \"updated_at\": \"2025-06-05 10:03:06\"\n    },\n    \"message\": null\n}"
						},
						{
							"id": "35647961-6823c0ab-650c-4af5-9a71-3d0fd97e9ceb",
							"name": "Hotel Not Found With Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30f7723c",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels",
										"ae8cadec-41f4-11f0-83de-30f7723c"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 22:30:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "66"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "aff89fb9-0529-428c"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc501ff971e5b4-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"error\",\n    \"hotel\": null,\n    \"message\": \"Hotel not found\"\n}"
						}
					]
				},
				{
					"name": "Create a new Hotel",
					"id": "35647961-6b691887-bb10-420a-83b6-ecd52cb03142",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"name\": \"Senator Hotel\",\r\n    \"address\": \"Tanoso\",\r\n    \"city\": \"Kumasi\",\r\n    \"country\": \"Ghana\",\r\n    \"email\": \"senator@email.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"description\": \"Best hotel ever\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1/hotels",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"hotels"
							]
						},
						"description": "## Add Hotel\n\nThis endpoint allows you to add a new hotel to the system.\n\n### HTTP Method\n\n`POST`\n\n### Endpoint\n\n`{{host}}/v1/hotels`\n\n### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **name** (string): The name of the hotel.\n    \n- **address** (string): The street address of the hotel.\n    \n- **city** (string): The city where the hotel is located.\n    \n- **country** (string): The country where the hotel is situated.\n    \n- **email** (string): The contact email for the hotel.\n    \n- **phone** (string): The contact phone number for the hotel.\n    \n- **description** (string): A brief description of the hotel.\n    \n\n#### Example Request\n\n``` json\n{\n  \"name\": \"Senator Hotel\",\n  \"address\": \"Tanoso\",\n  \"city\": \"Kumasi\",\n  \"country\": \"Ghana\",\n  \"email\": \"senator@email.com\",\n  \"phone\": \"233246706020\",\n  \"description\": \"Best hotel ever\"\n}\n\n ```\n\n### Expected Response\n\nUpon a successful request, the API will return a JSON response with the following structure:\n\n- **status** (string): Indicates the status of the request.\n    \n- **message** (string): A message providing additional information about the request outcome.\n    \n\n#### Example Response\n\n``` json\n{\n  \"status\": \"\",\n  \"message\": \"\"\n}\n\n ```\n\n### HTTP Status Codes\n\n- **200 OK**: The request was successful, and the hotel was added.\n    \n- Other status codes may indicate different outcomes or errors.\n    \n\nThis endpoint is part of a broader API that manages hotel information and may return related data in other requests, such as user details associated with the hotel."
					},
					"response": [
						{
							"id": "35647961-6d801bba-7af1-4d25-a0d6-d70c4cced9ae",
							"name": "Successful Create new Hotel",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"name\": \"Senator Hotel\",\r\n        \"address\": \"Tanoso\",\r\n        \"city\": \"Kumasi\",\r\n        \"country\": \"Ghana\",\r\n        \"email\": \"senator@email.com\",\r\n        \"phone\": \"233246706020\",\r\n        \"description\": \"Best hotel ever\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/v1/hotels",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 22:40:30 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "68"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "d50586a1-4af9-4ab9"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc5ee3f85652d6-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Hotel created successfully.\"\n}"
						}
					]
				},
				{
					"name": "Update Hotel Information",
					"id": "35647961-a5cb2fea-ab6f-4754-aed3-272a3a5ba9b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"name\": \"Senator Hotel\",\r\n    \"address\": \"Tanoso\",\r\n    \"city\": \"Kumasi\",\r\n    \"country\": \"Ghana\",\r\n    \"email\": \"senator@email.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"description\": \"Best hotel ever\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30f7723aa35c",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"hotels",
								"ae8cadec-41f4-11f0-83de-30f7723aa35c"
							]
						},
						"description": "### PATCH /v1/hotels/{hotelId}\n\nThis endpoint allows you to update the details of a specific hotel identified by its unique `hotelId`. The request modifies various attributes of the hotel, such as its name, address, city, country, email, phone number, and description.\n\n#### Request Body Format\n\nThe request must include a JSON payload with the following parameters:\n\n- **name** (string): The name of the hotel.\n    \n- **address** (string): The street address of the hotel.\n    \n- **city** (string): The city where the hotel is located.\n    \n- **country** (string): The country where the hotel is situated.\n    \n- **email** (string): The contact email for the hotel.\n    \n- **phone** (string): The contact phone number for the hotel.\n    \n- **description** (string): A brief description of the hotel.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"name\": \"Senator Hotel\",\n  \"address\": \"Tanoso\",\n  \"city\": \"Kumasi\",\n  \"country\": \"Ghana\",\n  \"email\": \"senator@email.com\",\n  \"phone\": \"233246706020\",\n  \"description\": \"Best hotel ever\"\n}\n\n ```\n\n#### Response Structure\n\nUpon a successful update, the API will return a JSON response with the following structure:\n\n- **status** (string): Indicates the status of the request.\n    \n- **message** (string): A message related to the request status.\n    \n\n**Example Response:**\n\n``` json\n{\n  \"status\": \"\",\n  \"message\": \"\"\n}\n\n ```\n\n#### Related Responses\n\nIn addition to the successful update response, other related responses from this endpoint may include:\n\n- A detailed hotel object upon retrieval, which includes attributes like `id`, `name`, `address`, `city`, `country`, `email`, `phone`, `description`, `created_at`, and `updated_at`.\n    \n- Generic status messages indicating the success or failure of the request.\n    \n\nThis endpoint is crucial for maintaining up-to-date information about hotels in the system, ensuring that users have access to the latest details."
					},
					"response": [
						{
							"id": "35647961-227d2e99-10f7-40ab-a059-ecc1827ce6bd",
							"name": "Successful Hotel Information Update",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Senator Hotel\",\r\n    \"address\": \"Tanoso\",\r\n    \"city\": \"Kumasi\",\r\n    \"country\": \"Ghana\",\r\n    \"email\": \"senator@email.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"description\": \"Best hotel ever\"\r\n}"
								},
								"url": {
									"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30f7723aa35c",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels",
										"ae8cadec-41f4-11f0-83de-30f7723aa35c"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 23:05:39 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "64"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "54fe03d6-28bf-44e6"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc83bbecbd5831-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Hotel updated successfully.\"\n}"
						},
						{
							"id": "35647961-908824c4-cadf-4fe4-ab9b-a257ef71ea0b",
							"name": "Hotel Not Found",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Senator Hotel\",\r\n    \"address\": \"Tanoso\",\r\n    \"city\": \"Kumasi\",\r\n    \"country\": \"Ghana\",\r\n    \"email\": \"senator@email.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"description\": \"Best hotel ever\"\r\n}"
								},
								"url": {
									"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30fc",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels",
										"ae8cadec-41f4-11f0-83de-30fc"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 23:07:36 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "54"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "7d54a8b8-1b06-48b4"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc869a0e838218-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"error\",\n    \"message\": \"Hotel not found\"\n}"
						}
					]
				},
				{
					"name": "Delete Hotel",
					"id": "35647961-89fc2543-977a-4541-b1c5-e939063670f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"name\": \"Senator Hotel\",\r\n    \"address\": \"Tanoso\",\r\n    \"city\": \"Kumasi\",\r\n    \"country\": \"Ghana\",\r\n    \"email\": \"senator@email.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"description\": \"Best hotel ever\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30f7723aa35c",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"hotels",
								"ae8cadec-41f4-11f0-83de-30f7723aa35c"
							]
						},
						"description": "## DELETE Hotel Endpoint\n\nThis endpoint is used to delete a specific hotel from the system based on its unique identifier.\n\n### Request\n\n- **Method**: `DELETE`\n    \n- **Endpoint**: `{{host}}/v1/hotels/{hotel_id}`\n    \n    - Replace `{hotel_id}` with the unique identifier of the hotel you wish to delete.\n        \n\n### Request Body\n\nThe request does not require a body for the DELETE operation, but the last call included the following payload for reference:\n\n``` json\n{\n  \"name\": \"Senator Hotel\",\n  \"address\": \"Tanoso\",\n  \"city\": \"Kumasi\",\n  \"country\": \"Ghana\",\n  \"email\": \"senator@email.com\",\n  \"phone\": \"233246706020\",\n  \"description\": \"Best hotel ever\"\n}\n\n ```\n\n### Response\n\nUpon successful deletion, the API will return a response with the following format:\n\n- **Status Code**: `200 OK`\n    \n- **Content-Type**: `application/json`\n    \n- {\"status\": \"\",\"message\": \"\"}\n    \n\n### Example Responses\n\n1. {\"status\": \"\",\"message\": \"\"}\n    \n2. {\"status\": \"\",\"hotel\": { \"id\": \"\", \"name\": \"\", \"address\": \"\", \"city\": \"\", \"country\": \"\", \"email\": \"\", \"phone\": \"\", \"description\": \"\", \"created_at\": \"\", \"updated_at\": \"\"},\"message\": null}\n    \n\n### Notes\n\n- The `status` field indicates the result of the operation, while the `message` field may provide additional information regarding the operation's outcome.\n    \n- This endpoint is part of a broader API that manages hotel data, and similar response structures may be encountered in related endpoints."
					},
					"response": [
						{
							"id": "35647961-7edba0f2-c02c-48a1-8474-7ef17e478481",
							"name": "Successully Delete Hotel",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Senator Hotel\",\r\n    \"address\": \"Tanoso\",\r\n    \"city\": \"Kumasi\",\r\n    \"country\": \"Ghana\",\r\n    \"email\": \"senator@email.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"description\": \"Best hotel ever\"\r\n}"
								},
								"url": {
									"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30f7723aa35c",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels",
										"ae8cadec-41f4-11f0-83de-30f7723aa35c"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 23:10:24 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "64"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "e7f69f34-badb-48b9"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc8ab0aa69801d-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Hotel deleted successfully.\"\n}"
						},
						{
							"id": "35647961-c132e7fb-c526-4c8a-87f6-dd0893f3f727",
							"name": "Hotel Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Senator Hotel\",\r\n    \"address\": \"Tanoso\",\r\n    \"city\": \"Kumasi\",\r\n    \"country\": \"Ghana\",\r\n    \"email\": \"senator@email.com\",\r\n    \"phone\": \"233246706020\",\r\n    \"description\": \"Best hotel ever\"\r\n}"
								},
								"url": {
									"raw": "{{host}}/v1/hotels/ae8cadec-41f4-11f0-83de-30fd7723aa35c",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"hotels",
										"ae8cadec-41f4-11f0-83de-30fd7723aa35c"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 10 Jun 2025 23:11:20 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "54"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-allow-headers",
									"value": "X-Requested-With, Content-Type, Accept, Origin, Authorization"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-max-age",
									"value": "86400"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, max-age=0"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "rndr-id",
									"value": "cce942ae-e116-4b31"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "x-powered-by",
									"value": "PHP/8.4.8"
								},
								{
									"key": "x-render-origin-server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "cf-cache-status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "94dc8c0f4e41e614-IAD"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": \"error\",\n    \"message\": \"Hotel not found\"\n}"
						}
					]
				}
			],
			"id": "35647961-3a6a9a26-70d2-4daa-82df-84f28f3ee675"
		},
		{
			"name": "Room Type",
			"item": [],
			"id": "35647961-192d8057-d5fc-4676-a8b8-02522329ec00"
		},
		{
			"name": "Check In",
			"item": [],
			"id": "35647961-a3fcaf8d-6a79-4056-ab71-6aa63531d7c6"
		},
		{
			"name": "Customer",
			"item": [],
			"id": "35647961-e22b440f-6809-42ff-9b1b-db43dcfb886d"
		},
		{
			"name": "Booking",
			"item": [],
			"id": "35647961-e805a119-4d37-4879-abf9-9664b123f2aa"
		},
		{
			"name": "Room",
			"item": [],
			"id": "35647961-8ee9c5e7-a729-453a-9814-d5c5a9bf2899"
		},
		{
			"name": "Payment",
			"item": [],
			"id": "35647961-9c49a463-a24a-406e-a8ef-41c37b9aea24"
		},
		{
			"name": "Payment Type",
			"item": [],
			"id": "35647961-87f71912-51ef-4708-892c-7b1f2e85f192"
		},
		{
			"name": "Check Out",
			"item": [],
			"id": "35647961-9edd2993-c24e-464d-989f-9ffd5d02ea20"
		},
		{
			"name": "Emergency Contact",
			"item": [],
			"id": "35647961-67694845-6185-4dc2-8d38-c9c86726dad8"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "97a648e6-5817-44d5-9cd2-4621efe7ea1c",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b6a885df-8311-41ab-87ff-3934f8322655",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://hotel-management-system-hqbw.onrender.com",
			"type": "string"
		}
	]
}